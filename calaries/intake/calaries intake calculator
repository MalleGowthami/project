import 'package:flutter/material.dart';

void main() {
  runApp(CalorieIntakeCalculatorApp());
}

class CalorieIntakeCalculatorApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: CalorieIntakeCalculator(),
    );
  }
}

class CalorieIntakeCalculator extends StatefulWidget {
  @override
  _CalorieIntakeCalculatorState createState() =>
      _CalorieIntakeCalculatorState();
}

class _CalorieIntakeCalculatorState extends State<CalorieIntakeCalculator> {
  final _formKey = GlobalKey<FormState>();
  final _ageController = TextEditingController();
  final _weightController = TextEditingController();
  final _heightController = TextEditingController();
  String _activityLevel = 'Sedentary';
  double _dailyCalories = 0.0;

  void _calculateCalories() {
    if (_formKey.currentState!.validate()) {
      final age = int.parse(_ageController.text);
      final weight = double.parse(_weightController.text);
      final height = double.parse(_heightController.text);

      double bmr;
      if (_activityLevel == 'Sedentary') {
        bmr = 1.2;
      } else if (_activityLevel == 'Lightly active') {
        bmr = 1.375;
      } else if (_activityLevel == 'Moderately active') {
        bmr = 1.55;
      } else {
        bmr = 1.725;
      }

      _dailyCalories = (10 * weight + 6.25 * height - 5 * age + 5) * bmr;
      setState(() {});
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Calorie Intake Calculator'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              TextFormField(
                controller: _ageController,
                decoration: InputDecoration(labelText: 'Age (years)'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please enter your age';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _weightController,
                decoration: InputDecoration(labelText: 'Weight (kg)'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please enter your weight';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _heightController,
                decoration: InputDecoration(labelText: 'Height (cm)'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please enter your height';
                  }
                  return null;
                },
              ),
              DropdownButtonFormField<String>(
                value: _activityLevel,
                decoration: InputDecoration(labelText: 'Activity Level'),
                items: <String>[
                  'Sedentary',
                  'Lightly active',
                  'Moderately active',
                  'Very active'
                ].map<DropdownMenuItem<String>>((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                }).toList(),
                onChanged: (String? newValue) {
                  setState(() {
                    _activityLevel = newValue!;
                  });
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _calculateCalories,
                child: Text('Calculate'),
              ),
              SizedBox(height: 20),
              Text(
                'Daily Calorie Intake: ${_dailyCalories.toStringAsFixed(2)}',
                style: TextStyle(fontSize: 18),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _ageController.dispose();
    _weightController.dispose();
    _heightController.dispose();
    super.dispose();
  }
}
